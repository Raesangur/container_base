E:\GitHub\container_base/container_base.h:20:50: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    container_base()                           = default;
                                                 ^
E:\GitHub\container_base/container_base.h:21:50: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    container_base(container_base<ItemType>&)  = default;
                                                 ^
E:\GitHub\container_base/container_base.h:22:44: warning: rvalue references are incompatible with C++98 [clang-diagnostic-c++98-compat]
    container_base(container_base<ItemType>&&) = default;
                                           ^
E:\GitHub\container_base/container_base.h:22:50: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    container_base(container_base<ItemType>&&) = default;
                                                 ^
E:\GitHub\container_base/container_base.h:23:50: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual ~container_base()                  = default;
                                                 ^
E:\GitHub\container_base/container_base.h:26:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using SizeType       = typename std::size_t;
                           ^
E:\GitHub\container_base/container_base.h:27:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using DifferenceType = typename std::ptrdiff_t;
                           ^
E:\GitHub\container_base/container_base.h:28:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using IteratorType   = typename pel::iterator_base<ItemType>;
                           ^
E:\GitHub\container_base/container_base.h:46:56: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual IteratorType       begin() noexcept        = 0;
                                                       ^
E:\GitHub\container_base/container_base.h:47:56: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual IteratorType       end() noexcept          = 0;
                                                       ^
E:\GitHub\container_base/container_base.h:48:56: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual const IteratorType cbegin() const noexcept = 0;
                                                       ^
E:\GitHub\container_base/container_base.h:49:56: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual const IteratorType cend() const noexcept   = 0;
                                                       ^
E:\GitHub\container_base/container_base.h:52:52: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual SizeType length() const noexcept       = 0;
                                                   ^
E:\GitHub\container_base/container_base.h:53:52: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual bool     is_empty() const noexcept     = 0;
                                                   ^
E:\GitHub\container_base/container_base.h:54:52: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual bool     is_not_empty() const noexcept = 0;
                                                   ^
E:\GitHub\container_base/iterator_base.h:20:32: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using IteratorType       = iterator_base<ItemType>;
                               ^
E:\GitHub\container_base/iterator_base.h:21:32: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using const_IteratorType = const iterator_base<ItemType>;
                               ^
E:\GitHub\container_base/iterator_base.h:23:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using SizeType       = typename pel::container_base<ItemType>::SizeType;
                           ^
E:\GitHub\container_base/iterator_base.h:24:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using DifferenceType = typename pel::container_base<ItemType>::DifferenceType;
                           ^
E:\GitHub\container_base/iterator_base.h:26:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using PointerType    = ItemType*;
                           ^
E:\GitHub\container_base/iterator_base.h:27:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using ReferenceType  = ItemType&;
                           ^
E:\GitHub\container_base/iterator_base.h:28:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using PointerTypeRef = PointerType&;
                           ^
E:\GitHub\container_base/iterator_base.h:30:34: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using const_PointerType    = const ItemType*;
                                 ^
E:\GitHub\container_base/iterator_base.h:31:34: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using const_ReferenceType  = const ItemType&;
                                 ^
E:\GitHub\container_base/iterator_base.h:32:34: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using const_PointerTypeRef = const const_PointerType&;
                                 ^
E:\GitHub\container_base/iterator_base.h:37:48: warning: deleted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    iterator_base()                          = delete;
                                               ^
E:\GitHub\container_base/iterator_base.h:38:48: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    iterator_base(iterator_base<ItemType>&)  = default;
                                               ^
E:\GitHub\container_base/iterator_base.h:39:42: warning: rvalue references are incompatible with C++98 [clang-diagnostic-c++98-compat]
    iterator_base(iterator_base<ItemType>&&) = default;
                                         ^
E:\GitHub\container_base/iterator_base.h:39:48: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    iterator_base(iterator_base<ItemType>&&) = default;
                                               ^
E:\GitHub\container_base/iterator_base.h:40:48: warning: defaulted function definitions are incompatible with C++98 [clang-diagnostic-c++98-compat]
    virtual ~iterator_base()                 = default;
                                               ^
E:\GitHub\container_base/iterator_base.h:49:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] PointerType       ptr() noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:49:51: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] PointerType       ptr() noexcept;
                                                  ^
E:\GitHub\container_base/iterator_base.h:50:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] const_PointerType ptr() const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:50:57: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] const_PointerType ptr() const noexcept;
                                                        ^
E:\GitHub\container_base/iterator_base.h:52:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] ReferenceType       operator*();
    ^
E:\GitHub\container_base/iterator_base.h:53:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] const_ReferenceType operator*() const;
    ^
E:\GitHub\container_base/iterator_base.h:55:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] operator PointerType() const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:55:56: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] operator PointerType() const noexcept;
                                                       ^
E:\GitHub\container_base/iterator_base.h:59:53: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    void operator=(const_PointerType other) noexcept;
                                                    ^
E:\GitHub\container_base/iterator_base.h:60:56: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    void operator=(const_PointerTypeRef other) noexcept;
                                                       ^
E:\GitHub\container_base/iterator_base.h:61:55: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    void operator=(const IteratorType& other) noexcept;
                                                      ^
E:\GitHub\container_base/iterator_base.h:63:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual IteratorType operator+(DifferenceType rhs) const;
    ^
E:\GitHub\container_base/iterator_base.h:68:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual IteratorType operator-(DifferenceType rhs) const;
    ^
E:\GitHub\container_base/iterator_base.h:75:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator==(const_IteratorType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:75:81: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator==(const_IteratorType rhs) const noexcept;
                                                                                ^
E:\GitHub\container_base/iterator_base.h:76:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator==(const_PointerType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:76:80: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator==(const_PointerType rhs) const noexcept;
                                                                               ^
E:\GitHub\container_base/iterator_base.h:77:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator!=(const_IteratorType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:77:81: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator!=(const_IteratorType rhs) const noexcept;
                                                                                ^
E:\GitHub\container_base/iterator_base.h:78:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator!=(const_PointerType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:78:80: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator!=(const_PointerType rhs) const noexcept;
                                                                               ^
E:\GitHub\container_base/iterator_base.h:80:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>(const_IteratorType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:80:80: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>(const_IteratorType rhs) const noexcept;
                                                                               ^
E:\GitHub\container_base/iterator_base.h:81:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>(const_PointerType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:81:79: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>(const_PointerType rhs) const noexcept;
                                                                              ^
E:\GitHub\container_base/iterator_base.h:83:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>=(const_IteratorType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:83:81: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>=(const_IteratorType rhs) const noexcept;
                                                                                ^
E:\GitHub\container_base/iterator_base.h:84:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>=(const_PointerType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:84:80: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator>=(const_PointerType rhs) const noexcept;
                                                                               ^
E:\GitHub\container_base/iterator_base.h:86:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<(const_IteratorType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:86:80: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<(const_IteratorType rhs) const noexcept;
                                                                               ^
E:\GitHub\container_base/iterator_base.h:87:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<(const_PointerType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:87:79: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<(const_PointerType rhs) const noexcept;
                                                                              ^
E:\GitHub\container_base/iterator_base.h:89:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<=(const_IteratorType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:89:81: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<=(const_IteratorType rhs) const noexcept;
                                                                                ^
E:\GitHub\container_base/iterator_base.h:90:5: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<=(const_PointerType rhs) const noexcept;
    ^
E:\GitHub\container_base/iterator_base.h:90:80: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
    [[nodiscard]] virtual bool operator<=(const_PointerType rhs) const noexcept;
                                                                               ^
E:\GitHub\container_base/iterator_base.h:99:23: warning: in-class initialization of non-static data members is incompatible with C++98 [clang-diagnostic-c++98-compat]
    PointerType m_ptr = nullptr;
                      ^
E:\GitHub\container_base/iterator_base.h:99:25: warning: 'nullptr' is incompatible with C++98 [clang-diagnostic-c++98-compat]
    PointerType m_ptr = nullptr;
                        ^
E:\GitHub\container_base/iterator_base.h:108:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline typename iterator_base<ItemType>::PointerType
^
E:\GitHub\container_base/iterator_base.h:109:32: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::ptr() noexcept
                               ^
E:\GitHub\container_base/iterator_base.h:114:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline typename iterator_base<ItemType>::const_PointerType
^
E:\GitHub\container_base/iterator_base.h:115:38: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::ptr() const noexcept
                                     ^
E:\GitHub\container_base/iterator_base.h:121:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline typename iterator_base<ItemType>::ReferenceType
^
E:\GitHub\container_base/iterator_base.h:127:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline typename iterator_base<ItemType>::const_ReferenceType
^
E:\GitHub\container_base/iterator_base.h:134:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline
^
E:\GitHub\container_base/iterator_base.h:135:55: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator PointerType() const noexcept
                                                      ^
E:\GitHub\container_base/iterator_base.h:144:61: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator=(const_PointerType other) noexcept
                                                            ^
E:\GitHub\container_base/iterator_base.h:150:64: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator=(const_PointerTypeRef other) noexcept
                                                               ^
E:\GitHub\container_base/iterator_base.h:156:63: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator=(const IteratorType& other) noexcept
                                                              ^
E:\GitHub\container_base/iterator_base.h:161:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline typename iterator_base<ItemType>::IteratorType
^
E:\GitHub\container_base/iterator_base.h:164:27: warning: use of old-style cast [clang-diagnostic-old-style-cast]
    PointerType pointer = (PointerType)ptr() + rhs;
                          ^
E:\GitHub\container_base/iterator_base.h:164:40: warning: cast from 'const int *' to 'int *' drops const qualifier [clang-diagnostic-cast-qual]
    PointerType pointer = (PointerType)ptr() + rhs;
                                       ^
E:\GitHub\container_base\main.cpp:12:29: note: in instantiation of member function 'pel::iterator_base<int>::operator+' requested here
    pel::iterator_base<int> testIt(&b[0]);
                            ^
E:\GitHub\container_base/iterator_base.h:192:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline typename iterator_base<ItemType>::IteratorType
^
E:\GitHub\container_base/iterator_base.h:195:27: warning: use of old-style cast [clang-diagnostic-old-style-cast]
    PointerType pointer = (PointerType)ptr() - rhs;
                          ^
E:\GitHub\container_base/iterator_base.h:195:40: warning: cast from 'const int *' to 'int *' drops const qualifier [clang-diagnostic-cast-qual]
    PointerType pointer = (PointerType)ptr() - rhs;
                                       ^
E:\GitHub\container_base\main.cpp:12:29: note: in instantiation of member function 'pel::iterator_base<int>::operator-' requested here
    pel::iterator_base<int> testIt(&b[0]);
                            ^
E:\GitHub\container_base/iterator_base.h:224:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:225:67: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator==(const_IteratorType rhs) const noexcept
                                                                  ^
E:\GitHub\container_base/iterator_base.h:230:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:231:66: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator==(const_PointerType rhs) const noexcept
                                                                 ^
E:\GitHub\container_base/iterator_base.h:236:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:237:67: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator!=(const_IteratorType rhs) const noexcept
                                                                  ^
E:\GitHub\container_base/iterator_base.h:242:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:243:66: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator!=(const_PointerType rhs) const noexcept
                                                                 ^
E:\GitHub\container_base/iterator_base.h:248:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:249:66: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator>(const_IteratorType rhs) const noexcept
                                                                 ^
E:\GitHub\container_base/iterator_base.h:254:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:255:65: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator>(const_PointerType rhs) const noexcept
                                                                ^
E:\GitHub\container_base/iterator_base.h:260:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:261:67: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator>=(const_IteratorType rhs) const noexcept
                                                                  ^
E:\GitHub\container_base/iterator_base.h:266:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:267:66: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator>=(const_PointerType rhs) const noexcept
                                                                 ^
E:\GitHub\container_base/iterator_base.h:272:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:273:66: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator<(const_IteratorType rhs) const noexcept
                                                                 ^
E:\GitHub\container_base/iterator_base.h:278:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:279:65: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator<(const_PointerType rhs) const noexcept
                                                                ^
E:\GitHub\container_base/iterator_base.h:284:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:285:67: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator<=(const_IteratorType rhs) const noexcept
                                                                  ^
E:\GitHub\container_base/iterator_base.h:290:1: warning: C++11 attribute syntax is incompatible with C++98 [clang-diagnostic-c++98-compat]
[[nodiscard]] inline bool
^
E:\GitHub\container_base/iterator_base.h:291:66: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
iterator_base<ItemType>::operator<=(const_PointerType rhs) const noexcept
                                                                 ^
E:\GitHub\container_base/testContainer.hpp:13:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using SizeType       = typename pel::container_base<ItemType>::SizeType;
                           ^
E:\GitHub\container_base/testContainer.hpp:14:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using DifferenceType = typename container_base<ItemType>::DifferenceType;
                           ^
E:\GitHub\container_base/testContainer.hpp:15:28: warning: alias declarations are incompatible with C++98 [clang-diagnostic-c++98-compat]
    using IteratorType   = typename pel::iterator_base<ItemType>;
                           ^
E:\GitHub\container_base/testContainer.hpp:19:22: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    ~testContainer() override
                     ^
E:\GitHub\container_base/testContainer.hpp:24:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:25:30: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    at(const SizeType index) override
                             ^
E:\GitHub\container_base/testContainer.hpp:27:9: warning: use of this statement in a constexpr function is incompatible with C++ standards before C++14 [clang-diagnostic-c++98-c++11-compat]
        (void)index;
        ^
E:\GitHub\container_base/testContainer.hpp:30:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline const ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:31:36: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    at(const SizeType index) const override
                                   ^
E:\GitHub\container_base/testContainer.hpp:33:9: warning: use of this statement in a constexpr function is incompatible with C++ standards before C++14 [clang-diagnostic-c++98-c++11-compat]
        (void)index;
        ^
E:\GitHub\container_base/testContainer.hpp:37:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:38:13: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    front() override
            ^
E:\GitHub\container_base/testContainer.hpp:42:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:43:12: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    back() override
           ^
E:\GitHub\container_base/testContainer.hpp:47:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline const ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:48:19: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    front() const override
                  ^
E:\GitHub\container_base/testContainer.hpp:52:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline const ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:53:18: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    back() const override
                 ^
E:\GitHub\container_base/testContainer.hpp:59:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:60:38: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    operator[](const SizeType index) override
                                     ^
E:\GitHub\container_base/testContainer.hpp:62:9: warning: use of this statement in a constexpr function is incompatible with C++ standards before C++14 [clang-diagnostic-c++98-c++11-compat]
        (void)index;
        ^
E:\GitHub\container_base/testContainer.hpp:65:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline const ItemType&
    ^
E:\GitHub\container_base/testContainer.hpp:66:44: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    operator[](const SizeType index) const override
                                           ^
E:\GitHub\container_base/testContainer.hpp:68:9: warning: use of this statement in a constexpr function is incompatible with C++ standards before C++14 [clang-diagnostic-c++98-c++11-compat]
        (void)index;
        ^
E:\GitHub\container_base/testContainer.hpp:73:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline IteratorType
    ^
E:\GitHub\container_base/testContainer.hpp:74:22: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    begin() noexcept override
                     ^
E:\GitHub\container_base/testContainer.hpp:74:22: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:76:29: warning: zero as null pointer constant [clang-diagnostic-zero-as-null-pointer-constant]
        return IteratorType(0);
                            ^
                            nullptr
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of member function 'pel::testContainer<int>::begin' requested here
    pel::testContainer<int> test;
                            ^
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of template class 'pel::testContainer<int>' requested here
E:\GitHub\container_base/testContainer.hpp:78:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline IteratorType
    ^
E:\GitHub\container_base/testContainer.hpp:79:20: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    end() noexcept override
                   ^
E:\GitHub\container_base/testContainer.hpp:79:20: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:81:29: warning: zero as null pointer constant [clang-diagnostic-zero-as-null-pointer-constant]
        return IteratorType(0);
                            ^
                            nullptr
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of member function 'pel::testContainer<int>::end' requested here
    pel::testContainer<int> test;
                            ^
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of template class 'pel::testContainer<int>' requested here
E:\GitHub\container_base/testContainer.hpp:83:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline const IteratorType
    ^
E:\GitHub\container_base/testContainer.hpp:84:29: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    cbegin() const noexcept override
                            ^
E:\GitHub\container_base/testContainer.hpp:84:29: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:86:29: warning: zero as null pointer constant [clang-diagnostic-zero-as-null-pointer-constant]
        return IteratorType(0);
                            ^
                            nullptr
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of member function 'pel::testContainer<int>::cbegin' requested here
    pel::testContainer<int> test;
                            ^
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of template class 'pel::testContainer<int>' requested here
E:\GitHub\container_base/testContainer.hpp:88:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline const IteratorType
    ^
E:\GitHub\container_base/testContainer.hpp:89:27: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    cend() const noexcept override
                          ^
E:\GitHub\container_base/testContainer.hpp:89:27: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:91:29: warning: zero as null pointer constant [clang-diagnostic-zero-as-null-pointer-constant]
        return IteratorType(0);
                            ^
                            nullptr
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of member function 'pel::testContainer<int>::cend' requested here
    pel::testContainer<int> test;
                            ^
E:\GitHub\container_base\main.cpp:13:29: note: in instantiation of template class 'pel::testContainer<int>' requested here
E:\GitHub\container_base/testContainer.hpp:95:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline SizeType
    ^
E:\GitHub\container_base/testContainer.hpp:96:29: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    length() const noexcept override
                            ^
E:\GitHub\container_base/testContainer.hpp:96:29: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:100:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline bool
    ^
E:\GitHub\container_base/testContainer.hpp:101:31: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    is_empty() const noexcept override
                              ^
E:\GitHub\container_base/testContainer.hpp:101:31: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:105:5: warning: 'constexpr' specifier is incompatible with C++98 [clang-diagnostic-c++98-compat]
    constexpr inline bool
    ^
E:\GitHub\container_base/testContainer.hpp:106:35: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    is_not_empty() const noexcept override
                                  ^
E:\GitHub\container_base/testContainer.hpp:106:35: warning: noexcept specifications are incompatible with C++98 [clang-diagnostic-c++98-compat]
E:\GitHub\container_base/testContainer.hpp:113:23: warning: 'override' keyword is incompatible with C++98 [clang-diagnostic-c++98-compat]
    to_string() const override
                      ^
E:\GitHub\container_base/testContainer.hpp:120:16: warning: in-class initialization of non-static data members is incompatible with C++98 [clang-diagnostic-c++98-compat]
    ItemType a = 0;
               ^
Suppressed 1 warnings (1 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
